/**
 * \mainpage CAN2matrix - An AVR based dual CAN solution to provide signals from one bus to another.
 *
 * \tableofcontents
 *
 * \section Copyright
 * - - -
 * <b>"THE ANY BEVERAGE-WARE LICENSE"</b> (Revision 42 - based on beer-ware license):
 *
 * <dev@layer128.net> wrote this file. As long as you retain this notice you
 * can do whatever you want with this stuff. If we meet some day, and you think
 * this stuff is worth it, you can buy me a be(ve)er(age) in return. (I don't
 * like beer much.)
 *
 * Matthias Kleemann
 * - - -
 *
 * \section Acknowledgements
 * Most functions and sequences are based on CAN tutorial by Fabian Greif
 * (http://www.kreatives-chaos.com) and his CAN library. I took the freedom
 * to adapt and re-write, so I could learn and not only take it as is. You
 * may have still the feeling, that I did not understand some things fully.
 * You could be right ;-)
 *
 * Nevertheless, without Fabians work, this little project would have taken
 * much, much longer or may never even finished.
 *
 * Thanks!
 *
 * - - -
 * \page page_comm_ic Communication with the Instrument Cluster
 *
 * After some time looking into the CAN traces, some image begins to clarify.
 *
 * \section c2m_comm_ic_sequence Some thoughts about Communication Sequence
 *
 * \subsection c2m_comm_ic_seq_radio Radio Information
 *
 * The communication of the radio part (two lines with 8 characters) begins
 * with a signal by the radio to the instrument cluster (IC). The IC
 * acknowledges the start.
 *
 * \code
 *             CAN    Instrument     Example
 * Radio        ID      Cluster
 *   _                     _
 *   |     --- 4D9 -->     |         08 C0 B9
 *   |     <-- 2E8 ---     |         39 D0 99
 *
 * \endcode
 *
 * The last byte (2) of the CAN messages mark the communication channel (CAN
 * ID) of the messages send by the unit itself (see example above: 6<B>B9</B>
 * for the radio messages and 6<B>99</B> for the instrument cluster channel).
 *
 * The lower nibble of the first byte is the sequence number of the data
 * packets. The data sequence starts with A0 [data] by the radio and is
 * acknowledged with A1 [data] by the IC.
 *
 * \code
 *             CAN    Instrument     Example
 * Radio        ID      Cluster
 *   _                     _
 *   |     --- 6B9 -->     |         A0 04 54 54 4A B2
 *   |     <-- 699 ---     |         A1 04 8A 85 43 94
 *
 * \endcode
 *
 * After the first sequence starts the text information sequence. The first
 * byte (upper nibble) signals the type of the message.
 *
 *- 2x is a data packet
 *- 1x is the last data packet
 *- 0x is the last data packet for the current frame (max. 4 messages)
 *
 * A data frame is acknowledged by Bx, where x is the following sequence
 * number. The next frame starts with the same sequence number as the
 * acknowledgement sequence number.
 *
 * A short example below shows a frame with text information after the
 * initial A0/A1 startup (first three messages). "TX" stands for any ASCII
 * character (text information, e.g. " AUDIO" in the example below).
 *
 * After the last information package (1x) from the radio a short sequence
 * takes place the other way round. It also starts with the sequence number 0,
 * but consist of only one package. It is acknowledged by radio immediately
 * with B1.
 *
 * \code
 *             CAN    Instrument     Example
 * Radio        ID      Cluster
 *   _                     _
 *   |     --- 6B9 -->     |         20 02 80 39 TX TX TX TX
 *   |     --- 6B9 -->     |         11 TX TX
 *   |     <-- 699 ---     |         B2
 *   |     <-- 699 ---     |         10 23 02 01
 *   |     --- 6B9 -->     |         B1
 *
 * \endcode
 *
 * Now two things can happen. Either the communication ends here, which is
 * signalled by radio with a simple message, or it starts with the next
 * information frame.
 *
 * Communication ends:
 * \code
 *             CAN    Instrument     Example
 * Radio        ID      Cluster
 *   _                     _
 *   |     --- 6B9 -->     |         A8
 *
 * \endcode
 *
 * Communication starts over with the next frame:
 * \code
 *             CAN    Instrument     Example
 * Radio        ID      Cluster
 *   _                     _
 *   |     --- 6B9 -->     |         20 09 02 57 0D 03 06 00  start of frame
 *   |     --- 6B9 -->     |         21 0A 00 TX TX TX TX TX
 *   |     --- 6B9 -->     |         22 TX TX TX 57 06 03 1E
 *   |     --- 6B9 -->     |         03 00 00 00 TX 57 08 03  last of frame
 *   |     <-- 699 ---     |         B4                       ack
 *   |     --- 6B9 -->     |         24 06 00 00 00 TX TX TX  next frame
 *   |     --- 6B9 -->     |         15 08                    end of data
 *   |     <-- 699 ---     |         B6                       ack
 *   |     <-- 699 ---     |         10 23 02 01              IC frame
 *   |     --- 6B9 -->     |         B1                       ack
 *   |     --- 6B9 -->     |         A8                       end of communication
 *
 * \endcode
 *
 * An interesting fact is, that the lines which are shown in the IC are sent
 * in reverse/mixed order. First the (lower) information line with normal text
 * information, like station name. After that the information of the upper
 * line with frequency band, station memory number and traffic programme
 * indicator.
 *
 * Example of two lines with 4 text information parts:
 * \code
 *             CAN    Instrument     Example
 * Radio        ID      Cluster
 *   _                     _
 *   |     --- 6B9 -->     |         20 09 02 57 0D 03 06 00
 *   |     --- 6B9 -->     |         21 0A 00 TX TX TX TX TX  station name
 *   |     --- 6B9 -->     |         22 TX TX TX 57 06 03 1E  e.g. "  NDR 2 "
 *   |     --- 6B9 -->     |         03 00 00 00 TX 57 08 03  memory, e.g. "2"
 *   |     <-- 699 ---     |         B4
 *   |     --- 6B9 -->     |         24 06 00 00 00 TX TX TX  band, e.g. "FM1"
 *   |     --- 6B9 -->     |         25 57 07 03 2A 00 00 00
 *   |     --- 6B9 -->     |         16 TX TX 08              "TP"
 *   |     <-- 699 ---     |         B7
 *
 * Looks like:
 * +--------+
 * |FM1 2 TP|
 * |  NDR 2 |
 * +--------+
 * \endcode
 *
 * The end of the information for the first line is always 08. If "TP" would
 * not have been sent after FM1 in the example above, the frame would end with
 * "15 08" as message content.
 *
 * <b>Guesswork:</b>
 * It is currently not clear how the formatting takes place and if the
 * first line has a fixed command/format set. The sequences like "57 XX 03"
 * look interesting enough, since it is part of the start of any text
 * information. The XX byte may stand for the line and/or position of the
 * text.
 *
 *- 57 0D 03: second line
 *- 57 06 03: first line, middle part
 *- 57 08 03: first line, first part
 *- 57 07 03: first line, last part
 *
 * Between the first, middle and last part seems to be a space (20) set
 * automatically.
 *
 * Sequence for writing SEEK into the first line:
 *- 57 09 03: first line, first part
 *
 * Sequence for writing " 98.70" into the second line:
 *- 57 0B 03: second line
 *
 * <b>To be verified:</b>
 * Sequence for 5 and 7 bytes, left aligned:
 *- 57 0A 03 - 5 characters
 *- 57 0C 03 - 7 characters
 *
 * Sequence in binary representation:
 * \code
 * Second Line - left aligned:
 * 0101 0111  0000 1101  0000 0011  - 8 characters
 * 0101 0111  0000 1011  0000 0011  - 6 characters
 *
 * First Line - left aligned:
 * 0101 0111  0000 1000  0000 0011  - 3 characters
 * 0101 0111  0000 1001  0000 0011  - 4 characters
 *
 * First Line - center aligned:
 * 0101 0111  0000 0110  0000 0011  - 1 character
 *
 * First Line - right aligned:
 * 0101 0111  0000 0111  0000 0011  - 2 characters
 * \endcode
 *
 * The lower nibble of the second byte looks like it controls the character
 * length. It is found and, in case of 5 and 7 characters, determined as
 * follows:
 *- 0110: 1 character
 *- 0111: 2 characters
 *- 1000: 3 characters
 *- 1001: 4 characters
 *- 1010: 5 characters
 *- 1011: 6 characters
 *- 1100: 7 characters
 *- 1101: 8 characters
 *
 * Another sequence jumps in sight, when looking to the messages below. After
 * the afore mentioned sequence, starting with "57 XX 03" the next sequences
 * are:
 *
 *- 06 00 0A 00: second line
 *- 1E 00 00 00: first line, middle part
 *- 06 00 00 00: first line, first part
 *- 2A 00 00 00: first line, last part
 *
 * Sequence in binary representation:
 * \code
 * 0000 0110  0000 0000  0000 1010  0000 0000  - left aligned , 8 characters
 * 0001 1110  0000 0000  0000 0000  0000 0000  - centered     , 1 character
 * 0000 0110  0000 0000  0000 0000  0000 0000  - left aligned , 3 characters
 * 0010 1010  0000 0000  0000 0000  0000 0000  - right aligned, 2 characters
 * \endcode
 *
 * The first byte looks like it controls the formatting. The upper nibble
 * looks like:
 *- 0000: left
 *- 0001: center
 *- 0010: right
 *
 * The third byte looks to handle the line itself. It may also be the position
 * in characters/bytes itself, assuming a hidden character (e.g. return) after
 * the first 8 characters of the upper line:
 *- 00: first line or position 0
 *- 0A: second line or position 10
 *
 **/
