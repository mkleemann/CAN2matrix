/**
 * \tableofcontents
 *
 * \page page_comm_system System Signal Communication
 *
 * To have a modern radio (or navitainment) unit running, you need some
 * basic system signals. These are described in the next chapters.
 *
 * To change the meaning and cross reference information between the CAN
 * busses, a intermediate memory is used. Since writing and using it is
 * controlled sequentially in the main loop (\ref CAN2matrix.c), no interrupt
 * happens to provide the risk to corrupt the data.
 *
 * \section c2m_comm_sys_ignition Ignition Signals
 *
 * The most basic signal is the status of the car ignition. In modern cars
 * this information is available via CAN. The translation of one status
 * message to the one the radio needs to work is done in general communication
 * module (\ref comm_matrix.c).
 *
 * \sa CANID_1_IGNITION, CANID_2_IGNITION
 *
 * The meaning of any bits in the signal bytes are described in
 * \ref matrix_bit_defs_can_1 and \ref matrix_bit_defs_can_2.
 *
 *
 * \section c2m_comm_sys_navigation Navigation Signals
 *
 * Since the unit is a navigation system too, it needs some basic navigation
 * signals.
 *
 * \subsection c2m_comm_sys_nav_wheel Speed and Wheel Ticks
 *
 * Usually navigation systems need GPS for an intial position update. In other
 * circumstances the GPS signal is not available and the system needs other
 * information to provide a position. One of the used signals is weither the
 * speed of the car or the ticks of the wheel sensors (e.g. from ABS).
 * Together with a gyro the system can pretty good guess the current location
 * from the last assured one.
 *
 * \sa CANID_1_WHEEL_GEAR_DATA, CANID_2_WHEEL_DATA
 *
 *
 * \subsection c2m_comm_sys_nav_gear Reverse Gear Status
 *
 * As described in the chapter \ref c2m_comm_sys_nav_wheel, the speed and
 * therefore distance, is available. Often not with the directional
 * information (forward, reverse). Here the information of the reverse gear
 * cuts in. In most cars either the gear information itself is available, or
 * the information about the reverse lights is. Both information can be used.
 *
 * \sa CANID_1_WHEEL_GEAR_DATA, CANID_2_REVERSE_GEAR
 *
 *
 * \section c2m_comm_sys_others Other Signals of Interest
 *
 * When playing around with the CAN information, other signals may be of
 * interest, to provide further information. This can be temperature,
 * engine RPM, PDC status and so on. An overview of all CAN IDs in use can be
 * found in the definitions of \ref matrix_can_ids_master. These are
 * translated and send via signals of the slave block (\ref matrix_can_ids_slave)
 * to the radio.
 *
 *
 * \page page_comm_ic Communication with the Instrument Cluster
 *
 * After some time looking into the CAN traces, some image begins to clarify.
 *
 * \section c2m_comm_ic_sequence Some thoughts about Communication Sequence
 *
 * \subsection c2m_comm_ic_seq_radio Radio Information
 *
 * The communication of the radio part (two lines with usually 8 characters)
 * begins with a signal by the radio to the instrument cluster (IC). The IC
 * acknowledges the start.
 *
 * \code
 *             CAN    Instrument     Example
 * Radio        ID      Cluster
 *   _                     _
 *   |     --- 4D9 -->     |         08 C0 B9
 *   |     <-- 2E8 ---     |         39 D0 99
 *
 * \endcode
 *
 * The last byte (2) of the CAN messages mark the communication channel (CAN
 * ID) of the messages send by the unit itself (see example above: 6<B>B9</B>
 * for the radio messages and 6<B>99</B> for the instrument cluster channel).
 *
 * The lower nibble of the first byte is the sequence number of the data
 * packets. The data sequence starts with A0 [data] by the radio and is
 * acknowledged with A1 [data] by the IC.
 *
 * \code
 *             CAN    Instrument     Example
 * Radio        ID      Cluster
 *   _                     _
 *   |     --- 6B9 -->     |         A0 04 54 54 4A B2
 *   |     <-- 699 ---     |         A1 04 8A 85 43 94
 *
 * \endcode
 *
 * \subsubsection c2m_comm_ic_seq_radio_startup Special Startup Information Sequence
 *
 * When starting up the radio a special sequence takes place. The first
 * ending sequence of the IC is different from any later one. Also the
 * number "9" may be of interest.
 * \code
 *             CAN    Instrument     Example
 * Radio        ID      Cluster
 *   _                     _
 *   |     --- 6B9 -->     |         10 15 39 00 01 01         ..9...
 *   |     <-- 699 ---     |         B1
 *   |     <-- 699 ---     |         10 35
 *   |     --- 6B9 -->     |         B1
 *   :                     :
 *   |     --- 6B9 -->     |         20 02 80 39 20 41 55 44    .Ç9 AUD
 *   |     --- 6B9 -->     |         11 49 4F                  .IO
 *   |     <-- 699 ---     |         B2
 *   |     <-- 699 ---     |         10 23 02 01
 *   |     --- 6B9 -->     |         B1
 * \endcode
 *
 * \subsubsection c2m_comm_ic_seq_radio_normal Normal Information Sequences
 *
 * After the first sequence starts the text information sequence. The first
 * byte (upper nibble) signals the type of the message.
 *
 *- 2x is a data packet
 *- 1x is the last data packet
 *- 0x is the last data packet for the current frame (max. 4 messages)
 *
 * A data frame is acknowledged by Bx, where x is the following sequence
 * number. The next frame starts with the same sequence number as the
 * acknowledgement sequence number.
 *
 * A short example below shows a frame with text information after the
 * initial A0/A1 startup (first three messages). "TX" stands for any ASCII
 * character (text information, e.g. " AUDIO" in the example below).
 *
 * After the last information package (1x) from the radio a short sequence
 * takes place the other way round. It also starts with the sequence number 0,
 * but consist of only one package. It is acknowledged by radio immediately
 * with B1.
 *
 * \code
 *             CAN    Instrument     Example
 * Radio        ID      Cluster
 *   _                     _
 *   |     --- 6B9 -->     |         20 02 80 39 TX TX TX TX
 *   |     --- 6B9 -->     |         11 TX TX
 *   |     <-- 699 ---     |         B2
 *   |     <-- 699 ---     |         10 23 02 01
 *   |     --- 6B9 -->     |         B1
 * \endcode
 *
 * Now two things can happen. Either the communication ends here, which is
 * signalled by radio with a simple message, or it starts with the next
 * information frame.
 *
 * Communication ends:
 * \code
 *             CAN    Instrument     Example
 * Radio        ID      Cluster
 *   _                     _
 *   |     --- 6B9 -->     |         A8
 *
 * \endcode
 *
 * Communication starts over with the next frame:
 * \code
 *             CAN    Instrument     Example
 * Radio        ID      Cluster
 *   _                     _
 *   |     --- 6B9 -->     |         20 09 02 57 0D 03 06 00  start of frame
 *   |     --- 6B9 -->     |         21 0A 00 TX TX TX TX TX
 *   |     --- 6B9 -->     |         22 TX TX TX 57 06 03 1E
 *   |     --- 6B9 -->     |         03 00 00 00 TX 57 08 03  last of frame
 *   |     <-- 699 ---     |         B4                       ack
 *   |     --- 6B9 -->     |         24 06 00 00 00 TX TX TX  next frame
 *   |     --- 6B9 -->     |         15 08                    end of data
 *   |     <-- 699 ---     |         B6                       ack
 *   |     <-- 699 ---     |         10 23 02 01              IC frame
 *   |     --- 6B9 -->     |         B1                       ack
 *   |     --- 6B9 -->     |         A8                       end of communication
 *
 * \endcode
 *
 * An interesting fact is, that the lines which are shown in the IC are sent
 * in reverse/mixed order. First the (lower) information line with normal text
 * information, like station name. After that the information of the upper
 * line with frequency band, station memory number and traffic programme
 * indicator.
 *
 * For Traffic Programme indication itself, the lines are sent in the "right"
 * order. Here the information is centered in both lines.
 *
 * \anchor c2m_comm_ic_seq_radio_example
 *
 * Example of two lines with 4 text information parts:
 * \code
 *             CAN    Instrument     Example
 * Radio        ID      Cluster
 *   _                     _
 *   |     --- 6B9 -->     |         20 09 02 57 0D 03 06 00
 *   |     --- 6B9 -->     |         21 0A 00 TX TX TX TX TX  station name
 *   |     --- 6B9 -->     |         22 TX TX TX 57 06 03 1E  e.g. " NDR 2  "
 *   |     --- 6B9 -->     |         03 00 00 00 TX 57 08 03  memory, e.g. "2"
 *   |     <-- 699 ---     |         B4
 *   |     --- 6B9 -->     |         24 06 00 00 00 TX TX TX  band, e.g. "FM1"
 *   |     --- 6B9 -->     |         25 57 07 03 2A 00 00 00
 *   |     --- 6B9 -->     |         16 TX TX 08              "TP"
 *   |     <-- 699 ---     |         B7
 *
 *
 * \endcode
 *
 * \image html station_info.png "how the station info looks like"
 *
 * \code
 * Traffic Programme:
 *
 *             CAN    Instrument     Example
 * Radio        ID      Cluster
 *   _                     _
 *   |     --- 6B9 -->     |         20 09 0E 57 09 23 20 00
 *   |     --- 6B9 -->     |         21 00 00 TX TX TX TX 57  "INFO"
 *   |     --- 6B9 -->     |         22 0D 23 20 00 0A 00 TX  " "
 *   |     --- 6B9 -->     |         03 TX TX TX TX TX TX TX  "NDR 2  "
 *   |     <-- 699 ---     |         B4
 *   |     --- 6B9 -->     |         14 08
 *   |     <-- 699 ---     |         B5
 *
 * Looks like:
 * +----------+
 * |   INFO   |
 * |  NDR 2   |
 * +----------+
 *
 * \endcode
 *
 * The end of the information for the first line is always 08. If "TP" would
 * not have been sent after FM1 in the example above, the frame would end with
 * "15 08" as message content.
 *
 *
 * \subsubsection c2m_comm_ic_seq_radio_begin First Bytes of Text Information
 *
 * Currently different sequences are known. A special one, described in
 * \ref c2m_comm_ic_seq_radio_startup and some others are sent in Radio mode
 * or when sending Traffic Programme information.
 *
 *- 02 80: startup
 *- 09 02: radio information
 *- 09 0E: traffic information
 *
 * Binary representation of sequences above:
 * \code
 * 0000 0010  1000 0000
 * 0000 1001  0000 0010
 * 0000 1001  0000 1110
 * \endcode
 *
 *
 * \subsubsection c2m_comm_ic_seq_radio_format Formatting of Text Information
 *
 * <b>Length and Mode of Text Information</b>
 *
 * It is currently quite clear how the formatting/positioning of the text
 * information takes place. The sequences start with "57 XX 03". The XX byte
 * stands for the length of the text.
 *
 * Some sequences from CAN traces taken:
 *- 57 0D 03: second line
 *- 57 06 03: first line, center part
 *- 57 08 03: first line, first part
 *- 57 07 03: first line, last part
 *
 * Traffic Programme Coding:
 *- 57 09 23: first line, center  e.g. "INFO"
 *- 57 0D 23: second line, center e.g. " NDR 2  "
 *
 * Sequence for writing SEEK into the first line:
 *- 57 09 03: first line, first part
 *
 * Sequence for writing " 98.70" into the second line:
 *- 57 0B 03: second line
 *
 * <b>Not yet verified, but very possible:</b>
 * Sequence for 5 and 7 bytes:
 *- 57 0A 03 - 5 characters
 *- 57 0C 03 - 7 characters
 *
 * Sequences in binary representation:
 * \code
 * Second Line - left aligned:
 * 0101 0111  0000 1101  0000 0011  - 8 characters
 * 0101 0111  0000 1011  0000 0011  - 6 characters
 *
 * Second Line - center aligned:
 * 0101 0111  0000 1101  0010 0011  - 8 characters (TP)
 *
 * First Line - left aligned:
 * 0101 0111  0000 1000  0000 0011  - 3 characters
 * 0101 0111  0000 1001  0000 0011  - 4 characters
 *
 * First Line - center aligned:
 * 0101 0111  0000 0110  0000 0011  - 1 character
 * 0101 0111  0000 1001  0010 0011  - 4 characters (TP)
 *
 * First Line - right aligned:
 * 0101 0111  0000 0111  0000 0011  - 2 characters
 * \endcode
 *
 * The lower nibble of the second byte looks like it controls the character
 * length. It is found as follows:
 *- 0110:  1 character
 *- 0111:  2 characters
 *- 1000:  3 characters
 *- 1001:  4 characters
 *- 1010:  5 characters*
 *- 1011:  6 characters
 *- 1100:  7 characters*
 *- 1101:  8 characters
 *- 1110:  9 characters "AUX IN..."
 *- 1111: 10 characters*
 *
 * (*) not verified
 *
 * The third byte may control the "overwrite" mode. In radio text, the
 * information is sent with "03" - maybe "no overwrite of existing text" -
 * whereas the traffic programme comes with "23" and removes all text
 * information prior.
 *
 * <b>Positioning of Text Information</b>
 *
 * Another sequence jumps in sight, when looking to the messages below. After
 * the afore mentioned sequence, starting with "57 XX 03" the next sequences
 * are:
 *
 * Station Info/Seek:
 *- 1E 00 00 00: first line , center part
 *- 06 00 00 00: first line , first part
 *- 2A 00 00 00: first line , last part
 *- 06 00 0A 00: second line, full
 *
 * Traffic Programme:
 *- 20 00 00 00: first line, center part
 *- 20 00 0A 00: second line, center part
 *
 * The first byte controls the positioning in the x-axis. The value is set
 * as dots in the dot matrix display. The third byte is the y-axis to set
 * the information in that direction.
 *
 * \image html station_info_with_labels.png "marker values from CAN message"
 *
 * For the full sequence see the \ref c2m_comm_ic_seq_radio_example "example"
 * for two line radio information above. Marked in blue are the dots
 * presenting the width of a character - first line - and the spaces sent
 * in the second line.
 *
 * It is possible that the position information make use of bytes 1/2 and 3/4
 * as 16-bit value. To address the full dot matrix display (x = 64 and y = 96)
 * this is not necessary.
 *
 * Sequence in binary representation:
 * \code
 * Station Info/Seek:
 *
 *  x-axis                y-axis
 * +-------+             +-------+
 * |       |             |       |
 * 0000 0110  0000 0000  0000 1010  0000 0000  - x =  6, y = 10
 * 0001 1110  0000 0000  0000 0000  0000 0000  - x = 30, y =  0
 * 0000 0110  0000 0000  0000 0000  0000 0000  - x =  6, y =  0
 * 0010 1010  0000 0000  0000 0000  0000 0000  - x = 42, y =  0
 *
 * Traffic Programme:
 * 0010 0000  0000 0000  0000 0000  0000 0000  - x = 32, y =  0
 * 0010 0000  0000 0000  0000 1010  0000 0000  - x = 32, y = 10
 * \endcode
 *
 * \subsubsection c2m_comm_ic_seq_radio_test Test Pattern for IC Communication
 *
 * First normal (known) formatting with different text:
 *
 * \code
 * 20 09 02 57 0D 03 06 00
 * 21 0A 00 TX TX TX TX TX   "Test "
 * 22 TX TX TX 57 06 03 1E   "Me!"
 * 03 00 00 00 TX 57 08 03   "9"
 * 24 06 00 00 00 TX TX TX   "HDD"
 * 25 57 07 03 2A 00 00 00
 * 16 TX TX 08               "TP"
 * \endcode
 *
 * Only one line (second):
 *
 * \code
 * 20 09 02 57 0D 03 06 00
 * 21 0A 00 TX TX TX TX TX   "2nd l"
 * 12 TX TX TX 08            "ine"
 * \endcode
 *
 * Only one line (first):
 *
 * \code
 * 20 09 02 57 0D 03 06 00
 * 21 00 00 TX TX TX TX TX   "1st l"
 * 12 TX TX TX 08            "ine"
 * \endcode
 *
 * Only one line (centered between line 1 and 2):
 *
 * \code
 * 20 09 02 57 0D 03 06 00
 * 21 05 00 TX TX TX TX TX   " inli"
 * 12 TX TX TX 08            "ne "
 * \endcode
 *
 * Formatting: center 3 characters in second line
 *
 * \code
 * 20 09 02 57 08 03 1E 00
 * 11 0A 00 TX TX TX 08      "2nd"
 * \endcode
 *
 * Formatting: right 3 characters in second line
 *
 * \code
 * 20 09 02 57 08 03 2A 00
 * 11 0A 00 TX TX TX 08      "2nd"
 * \endcode
 *
 *
 * \section c2m_comm_ic_communication Communication with the Instrument Cluster
 *
 * \subsection c2m_comm_ic_handling Handling the Communication
 *
 * Several modes for information presentation are known with the original
 * unit, so some will be applied to show the information with the new radio.
 * During the analysis, further possibilities have been found, e.g. to show
 * textual information on any postion one wishes in the 64x20px text area for
 * radio information.
 *
 * \subsubsection c2_ic_comm_media_view Media Information
 *
 * HDD, AUX, Radio, DVD
 *
 * \subsubsection c2_ic_comm_pdc_view PDC Information
 *
 * 4 Sensors, value in cm
 *
 * \subsubsection c2_ic_comm_tp_view Traffic Programme
 *
 * Traffic/Station Name
 *
 * \subsubsection c2_ic_comm_setup_view Setup Information
 *
 * Setup/Media Information
 *
 * \subsection c2m_comm_ic_state_machine Communication State Machine
 *
 * To handle the communication protocol with the instrument cluster a state
 * machine will be used. This ensures the sequences needed.
 *
 * \dotfile comm_ic_fsm.dot
 *
 *
 */

